;=============================================================================
; Подпрограммы для работы со строками
;
; (C) 2017-2020 Vitaliy Zinoviev
; https://github.com/nf-zvv/IVC_Tracer_v2
;
; History
; =======
; 24.02.2017
; 27.08.2017 доработки
; 28.07.2020 переименованы IS_CHAR в IS_ALNUM, IS_LETTER в IS_ALPHA
;            добавлены IS_CHAR, IS_PRINT
; 29.07.2020 STR_TO_UINT16, atoi, STR_TO_UINT8 перемещены в convert.asm
; 
;=============================================================================
#ifndef _STRINGS_ASM_
#define _STRINGS_ASM_


;-----------------------------------------------------------------------------
; Сравнение строк
; Используются: r16*, r17*, X*, Z*
; Вход: X - указатель на строку в ОЗУ
;       Z - указатель на строку во Flash
; Выход: r16 результат сравнения
;        r16 = 0 - строки равны
;        r16 = 1 - строки не равны
;-----------------------------------------------------------------------------
STR_CMP:
			lpm		r16,Z+
			ld		r17,X+
			cp		r16,r17
			brne	STR_CMP_FAIL
			tst		r16
			breq	STR_CMP_SUCCESS
			rjmp	STR_CMP
STR_CMP_SUCCESS:
			ldi		r16,0	; строки равны
			ret
STR_CMP_FAIL:
			ldi		r16,1	; строки не равны
			ret


;-----------------------------------------------------------------------------
; Проверка принадлежности символа к печатаемым символам: буквы, цифры, спец.символы
; Используются: r15*, r16*, r17
; Вход: r17
; Выход: r16
;        r16 = 0 - ложь
;        r16 = 1 - истина
;-----------------------------------------------------------------------------
IS_PRINT:
			rcall	IS_ALNUM
			mov		r15,r16
			rcall	IS_CHAR
			or		r16,r15
			ret

;-----------------------------------------------------------------------------
; Проверка принадлежности символа к буквам/цифрам (alphanumeric)
; Используются: r15*, r16*, r17
; Вход: r17
; Выход: r16
;        r16 = 0 - ложь
;        r16 = 1 - истина
;-----------------------------------------------------------------------------
IS_ALNUM:
			rcall	IS_ALPHA
			mov		r15,r16
			rcall	IS_DIGIT
			or		r16,r15
			ret


;-----------------------------------------------------------------------------
; Проверка принадлежности символа к буквам (alphabetic)
; только латинские буквы (прописные и строчные)
; Используются: r15*, r16*, r17
; Вход: r17
; Выход: r16
;        r16 = 0 - ложь
;        r16 = 1 - истина
;-----------------------------------------------------------------------------
IS_ALPHA:
			rcall	IS_LOWER
			mov		r15,r16
			rcall	IS_UPPER
			or		r16,r15
			ret


;-----------------------------------------------------------------------------
; Проверка принадлежности символа к строчным (маленьким) буквам
; только латинские буквы
; Используются: r16*, r17
; Вход: r17
; Выход: r16
;        r16 = 0 - ложь
;        r16 = 1 - истина
;-----------------------------------------------------------------------------
IS_LOWER:
			clr		r16
			cpi		r17,0x61
			brlo	NON_LOWER	; перейти, если меньше
			cpi		r17,0x7b
			brsh	NON_LOWER	; перейти, если равно или больше
			ldi		r16,1
NON_LOWER:
			ret


;-----------------------------------------------------------------------------
; Проверка принадлежности символа к прописным (большим) буквам
; только латинские буквы
; Используются: r16*, r17
; Вход: r17
; Выход: r16
;        r16 = 0 - ложь
;        r16 = 1 - истина
;-----------------------------------------------------------------------------
IS_UPPER:
			clr		r16
			cpi		r17,0x41
			brlo	NON_UPPER	; перейти, если меньше
			cpi		r17,0x5b
			brsh	NON_UPPER	; перейти, если равно или больше
			ldi		r16,1
NON_UPPER:
			ret


;-----------------------------------------------------------------------------
; Проверка принадлежности символа к цифрам
; цифры лежат в диапазоне ASCII 0x30...0x39 включительно (0...9 соответственно)
; Используются: r16*, r17
; Вход: r17
; Выход: r16
;        r16 = 0 - ложь
;        r16 = 1 - истина
;-----------------------------------------------------------------------------
IS_DIGIT:
			; 0x30 =< r17 =< 0x39
			clr		r16
			cpi		r17,0x30	; 0x30 = '0'
			brlo	NON_DIGIT	; перейти, если меньше
			cpi		r17,0x3a
			brsh	NON_DIGIT	; перейти, если равно или больше
			ldi		r16,1
NON_DIGIT:
			ret


;-----------------------------------------------------------------------------
; Проверка принадлежности символа к специальным символам
; Подходят следующие группы символов:
;  1) ! " # $ % & ' ( ) * + , - . /
;  2) : ; < = > ? @
;  3) [ \ ] ^ _ `
;  4) { | } ~
; 
; Используются: r16*, r17
; Вход: r17
; Выход: r16
;        r16 = 0 - ложь
;        r16 = 1 - истина
;-----------------------------------------------------------------------------
IS_CHAR:
			clr		r16
			; Первый диапазон символов: коды 33...47
			cpi		r17,33		; 33 = '!'
			brlo	NON_CHAR	; перейти, если меньше
			cpi		r17,48
			brsh	IS_CHAR_2	; перейти, если равно или больше
			rjmp	IS_CHAR_YES
IS_CHAR_2:
			; Второй диапазон символов: коды 58...64
			cpi		r17,58		; 58 = ':'
			brlo	NON_CHAR	; перейти, если меньше
			cpi		r17,65
			brsh	IS_CHAR_3	; перейти, если равно или больше
			rjmp	IS_CHAR_YES
IS_CHAR_3:
			; Третий диапазон символов: коды 91...96
			cpi		r17,91		; 91 = '['
			brlo	NON_CHAR	; перейти, если меньше
			cpi		r17,97
			brsh	IS_CHAR_4	; перейти, если равно или больше
			rjmp	IS_CHAR_YES
IS_CHAR_4:
			; Четвертый диапазон символов: коды 123...126
			cpi		r17,123		; 123 = '{'
			brlo	NON_CHAR	; перейти, если меньше
			cpi		r17,127
			brsh	NON_CHAR	; перейти, если равно или больше
IS_CHAR_YES:
			ldi		r16,1
NON_CHAR:
			ret


;-----------------------------------------------------------------------------
; Вычисление длины строки
; строка должна оканчиваться на 0 (zero-ended string)
; Признаком конца строки является символ 0
; Используются: r16*, r17 (восстан.), Y (восстан.)
; Вход: Y - указатель на строку в ОЗУ
; Выход: r16
;-----------------------------------------------------------------------------
STR_LEN:
			push	YL	; сохраняем указатель
			push	YH
			push	r17
			clr		r16
STR_LEN_LOOP:
			ld		r17,Y+
			tst		r17
			breq	STR_LEN_EXIT
			inc		r16
			rjmp	STR_LEN_LOOP
STR_LEN_EXIT:
			pop		r17
			pop		YH
			pop		YL	; восстанавливаем указатель
			ret


#endif  /* _STRINGS_ASM_ */

;------------------------------------------------------------------------------
; End of file
;------------------------------------------------------------------------------
